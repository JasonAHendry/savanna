from typing import List, Union
from savanna.util.metadata import check_barcode_format


class BarcodeAnalysisResults(dict):
    """
    Dictionary where keys are barcode name, and values
    are tuple of a bool (indicating whether analysis was successful),
    and a List[str] of generated output files

    {
        barcode01: (True, [outputs]),
        barcode02: (False, [outputs])
    }

    This object is generated by every `ExperimentAnalysis`, in the
    `def _run()` method.

    It can be used in the `def _summarise()` method to skip summarising
    failed barcodes, and to more easily get paths to output files.

    TODO BUG:
    - Currently, *only* generated if pipeline is run

    """

    def __init__(self, barcodes: List[str]):
        """
        Initialise as all barcodes failing and no outputs

        """
        for barcode in barcodes:
            self[barcode] = (False, [])

    def __setitem__(self, key: str, value: Union[bool, List[str]]):
        """
        Added a variety of checks to make sure the assigment is valid

        """

        # Barcode as key
        check_barcode_format(key, try_to_fix=False)

        # Values as (bool, List[str])
        if not isinstance(value, tuple):
            raise TypeError(
                f"With {self.__class__.__name__} dictionary, value must be (bool, List[str])."
            )

        success, outputs = value
        if not isinstance(success, bool):
            raise TypeError(
                f"With {self.__class__.__name__} dictionary, value must be (bool, List[str])."
            )
        if not isinstance(outputs, List):
            raise TypeError(
                f"With {self.__class__.__name__} dictionary, value must be (bool, List[str])."
            )

        super().__setitem__(key, value)

